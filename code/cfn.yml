---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Trend Micro Container Image Security demo environment"

Parameters:
  CisHostname:
    Type: "String"
    Description: "Container Image Security hostname"

  CisGuiUsername:
    Type: "String"
    Default: "administrator"
    Description: "Container Image Security GUI username"

  CisGuiPassword:
    Type: "String"
    NoEcho: "true"
    Description: "Container Image Security GUI password"

  CisRegistryUsername:
    Type: "String"
    Default: "registry"
    Description: "Container Image Security pre-registry username"

  CisRegistryPassword:
    Type: "String"
    Default: "password"
    NoEcho: "true"
    Description: "Container Image Security pre-registry password"

  CisPublicCertificate:
    Type: "String"

  BranchName:
    Type: "String"
    Default: "master"

  PipelineName:
    Type: "String"
    Default: "Trend-Container-Image-Security"

  CodeCommitRepoName:
    Type: "String"
    Default: "DemoApp"

  EcrRepoName:
    Type: "String"
    Description: "Container image name. Note: MUST BE LOWER CASE."
    Default: "demoapp"

  ArtifactBucketName:
    Type: "String"

  JumphostInstanceSize:
    Type: "String"
    Default: "t2.medium"

  VpcCidr:
    Type: "String"
    Default: "192.168.0.0/16"

  PublicSubnet1Cidr:
    Type: "String"
    Default: "192.168.1.0/24"

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: "Name"
          Value: "Trend-Micro-Demo-Vpc"

  Igw:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "Trend-Micro-Demo-Igw"

  IgwAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref Vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Name"
          Value: "Trend-Micro-Demo-Public-Subnet-1"

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: "Name"
          Value: "Trend-Micro-Demo-Public-Route-Table"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: "IgwAttachement"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref Igw

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref ArtifactBucketName

  CodeCommitRepo:
    Type: "AWS::CodeCommit::Repository"
    Properties:
      RepositoryName: !Ref CodeCommitRepoName
      RepositoryDescription: "CodeCommit Repository"

  CiCidPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Ref PipelineName
      ArtifactStore:
        Type: "S3"
        Location: !Ref ArtifactBucketName
      RoleArn: !GetAtt CiCidPipelineRole.Arn
      Stages:
        - Name: "Source"
          Actions:
            - Name: "Source"
              ActionTypeId:
                Category: "Source"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeCommit"
              OutputArtifacts:
                - Name: "AppCode"
              Configuration:
                BranchName: !Ref BranchName
                PollForSourceChanges: "false"
                RepositoryName: !Ref CodeCommitRepoName
              RunOrder: "1"

        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Version: "1"
                Provider: "CodeBuild"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: "AppCode"
              OutputArtifacts:
                - Name: "BuildOutput"
              RunOrder: "1"
      Tags:
        - Key: "Name"
          Value: !Ref PipelineName

  CiCidPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: "Allow"
          Principal:
            Service:
            - "codepipeline.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      Policies:
      - PolicyName: "root"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Action:
            - "codecommit:GetBranch"
            - "codecommit:GetCommit"
            - "codecommit:UploadArchive"
            - "codecommit:GetUploadArchiveStatus"
            - "codecommit:CancelUploadArchive"
            Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CodeCommitRepoName}"
            Effect: "Allow"
          - Action:
            - "s3:GetObject"
            - "s3:GetObjectVersion"
            - "s3:GetBucketVersioning"
            - "s3:PutObject"
            Resource:
              - !Sub "arn:aws:s3:::${ArtifactBucketName}/*"
            Effect: "Allow"
          - Action:
            - "codebuild:StartBuild"
            - "codebuild:BatchGetBuilds"
            - "iam:PassRole"
            Resource: "*"
            Effect: "Allow"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: "CODEPIPELINE"
      Description: "Create Docker image"
      Environment:
        Type: "LINUX_CONTAINER"
        Image: "aws/codebuild/amazonlinux2-x86_64-standard:3.0"
        ComputeType: "BUILD_GENERAL1_SMALL"
        PrivilegedMode: "true"
        EnvironmentVariables:
          - Name: "CIS_PUBLIC_CERTIFICATE"
            Value: !Ref CisPublicCertificate
          - Name: "CIS_HOSTNAME"
            Value: !Ref CisHostname
          - Name: "CIS_GUI_USERNAME"
            Value: !Ref CisGuiUsername
          - Name: "TREND_CIS_GUI_PASSWORD"
            Value: "TREND_CIS_GUI_PASSWORD"
            Type: "SECRETS_MANAGER"
          - Name: "PRE_REGISTRY_USERNAME"
            Value: !Ref CisRegistryUsername
          - Name: "TREND_PRE_REGISTRY_PASSWORD"
            Value: "TREND_PRE_REGISTRY_PASSWORD"
            Type: "SECRETS_MANAGER"
          - Name: "AWS_DEFAULT_REGION"
            Value: !Ref AWS::Region
          - Name: "AWS_ACCOUNT_ID"
            Value: !Ref AWS::AccountId
          - Name: "IMAGE_REPO_NAME"
            Value: !Ref EcrRepoName
          - Name: "IMAGE_TAG"
            Value: "latest"
      Name: "DockerImagePipeline"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: |
          version: 0.1
          phases:
            pre_build:
              commands:
                - echo Adding Container Image Security public certificate to the list of trusted registries...
                - mkdir -p /etc/docker/certs.d/$CIS_HOSTNAME:5000
                - echo $CIS_PUBLIC_CERTIFICATE | base64 -d > /etc/docker/certs.d/$CIS_HOSTNAME:5000/ca.crt
                - echo Logging in to Amazon ECR...
                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
            build:
              commands:
                - echo Build started on `date`
                - echo Building the Docker image...
                - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
                - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
                - echo Scanning image...
                - >-
                    docker run -v /var/run/docker.sock:/var/run/docker.sock
                    deepsecurity/smartcheck-scan-action
                    --image-name $IMAGE_REPO_NAME:$IMAGE_TAG
                    --smartcheck-host=$CIS_HOSTNAME
                    --smartcheck-user=$CIS_GUI_USERNAME
                    --smartcheck-password=$TREND_CIS_GUI_PASSWORD
                    --insecure-skip-tls-verify
                    --insecure-skip-registry-tls-verify
                    --preregistry-scan
                    --preregistry-user $PRE_REGISTRY_USERNAME
                    --preregistry-password $TREND_PRE_REGISTRY_PASSWORD
            post_build:
              commands:
                - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"
                - echo Build completed on `date`
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
#      Tags:
#        - Tag

  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref EcrRepoName
#      Tags:
#        - Tag

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
                - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "ServiceRole"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
              - Effect: "Allow"
                Resource:
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:TREND_CIS_GUI_PASSWORD-*
                  - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:TREND_PRE_REGISTRY_PASSWORD-*
                Action: "secretsmanager:GetSecretValue"
              - Resource: !Sub "arn:aws:s3:::${ArtifactBucketName}/*"
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:GetObjectVersion"
              - Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrRepoName}"
                Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:PutImage"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
              - Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}"
                Effect: "Allow"
                Action: "codepipeline:StartPipelineExecution"

  CodeCommitEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: "PipelineTrigger"
      EventPattern:
        source:
          - "aws.codecommit"
        detail-type:
          - "CodeCommit Repository State Change"
        resources:
          - !GetAtt CodeCommitRepo.Arn
        detail:
          event:
            - "referenceCreated"
            - "referenceUpdated"
          referenceType:
            - "branch"
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${PipelineName}"
          RoleArn: !GetAtt CodeBuildServiceRole.Arn
          Id: !Sub "codepipeline-${PipelineName}"

  Cloud9Host:
    Type: AWS::Cloud9::EnvironmentEC2
    Properties:
      Description: "Container Image Security IDE used to create & modify a Dockerfile"
      InstanceType: !Ref JumphostInstanceSize
      Name: "Trend-Container-Image-Security-IDE"
      Repositories:
          - RepositoryUrl: !Sub "https://git-codecommit.${AWS::Region}.amazonaws.com/v1/repos/${CodeCommitRepoName}"
            PathComponent: !Sub "/${CodeCommitRepoName}"
      SubnetId: !Ref PublicSubnet1

Outputs:
  CloneUrlHttp:
    Description: "CodeCommit HTTP URL"
    Value: !GetAtt CodeCommitRepo.CloneUrlHttp
  CloneUrlSsh:
    Description: "CodeCommit SSH URL"
    Value: !GetAtt CodeCommitRepo.CloneUrlSsh
  Cloud9Url:
    Description: "Cloud9 Environment"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloud9/ide/${Cloud9Host}"
